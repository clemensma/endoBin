env { PYTHONNOUSERSITE = 1 }

// A failed process is retried when encountering one of these exit codes
final ERROR_CODES = [12,143,137,104,134,139]
// Use one of these node for memory-intense tasks
final FAT_PARTITION = 'fat'
final FAT_PLUS_PARTITION = 'fat+'
// Use this node for non-memory-intense tasks
final NORMAL_PARTITION = 'medium'
// Start using the fat/fat+ partitions when the amount of memory exceeds one
// of these values
final FAT_PARTITION_THRESHOLD = 60.GB
final FAT_PLUS_PARTITION_THRESHOLD = 500.GB
// Never request more memory than this from a node
final MAX_NODE_MEMORY = 1.TB
// Job submissions can never be longer than this
final MAX_NODE_WALLTIME = 5.d
// Request `--qos=long` when job submissions are longer than this threshold
final QOS_LONG_THRESHOLD = 2.d

manifest {
    name = 'endoMiner'
    author = 'Clemens Mauksch, Thilo Schulze'
    homePage = 'https://github.com/clemensma/endoMiner'
    description = 'An easy to use pipeline to separate endosymbiont genomes from their host\'s'
    mainScript = 'main.nf'
    nextflowVersion = '>=21.10.0'
    version = '0.0.1'
}

params {
    // Mandatory arguments
    reads = "$projectDir/examples/all_R{1,2}.fastq.gz"
    endosymbiont_reference = "$projectDir/examples/wNo_example_reference.fasta"

    // Input/output options
    output = "output"

    // Resource allocation
    max_memory = 128.GB
    max_cpus = 16
    max_retries = 2
    max_time = '1.d'

    // Flow control
    mode                       = "both"
    contigs                    = false

    // Trimming (Trim Galore!)

    trim_length                = 55
    trim_quality               = 20
    trim_adapter               = null
    trim_phred64               = null
    trim_clip_R1               = null
    trim_three_prime_clip_R1   = null
    trim_clip_R2               = null
    trim_three_prime_clip_R2   = null

    // Assembly (SPAdes)
    //   Example, one K-mer: [81]
    //   Example, multiple K-mers: [71, 81, 91]
    kmers                 = [111]
    meta                  = true


    //MITOGENOME-extraction
    // Mandatory options
    mitogenome_reference = "$projectDir/seqs/mitogenome_reference.fa"

    // Non-mandatory options
    species_id              = null

    // Mitogenome extraction
    coverage_cutoff         = 6
    min_blast_wordsize      = 11
    max_blast_wordsize      = 25
    nucleotide_size         = 16500

    // NOVOPlasty settings
    min_size                = 12000
    max_size                = 22000
    kmer_size               = 33
    read_length             = 151
    insert_size             = 300

    // MITOS settings
    mitos_reference         = "refseq63m"
    genetic_code            = '05'

    // Miscellaneous
    help = false
    version = false

}

process {
  withLabel:fast {
    cpus           = { 4 * task.attempt < params.max_cpus ?
                       4 * task.attempt : params.max_cpus }
    memory         = { 8.GB * task.attempt < params.max_memory ?
                       8.GB * task.attempt : params.max_memory }
    time           = { 3.h * task.attempt < params.max_time ?
                       3.h * task.attempt : params.max_time }
    clusterOptions = '--constraint=scratch2'
    errorStrategy  = { task.exitStatus in ERROR_CODES ? 'retry' : 'finish' }
    maxRetries     = params.max_retries
  }
  withLabel:normal {
    cpus           = { 4 * task.attempt < params.max_cpus ?
                       4 * task.attempt : params.max_cpus }
    memory         = { 8.GB * task.attempt < params.max_memory ?
                       8.GB * task.attempt : params.max_memory }
    time           = { 6.h * task.attempt < params.max_time ?
                       6.h * task.attempt : params.max_time }
    clusterOptions = '--constraint=scratch2'
    errorStrategy  = { task.exitStatus in ERROR_CODES ? 'retry' : 'finish' }
    maxRetries     = params.max_retries
  }
  withLabel:big_mem {
    cpus           = params.max_cpus
    // Do not utilize more than 1 TB of memory (most nodes have less)
    memory         = { params.max_memory * task.attempt < MAX_NODE_MEMORY ?
                       params.max_memory * task.attempt : MAX_NODE_MEMORY }
    // Runtime cannot exceed 5 days total
    time           = { params.max_time < MAX_NODE_WALLTIME ?
                       params.max_time : MAX_NODE_WALLTIME }
    // Add the `--qos=long` flag if the job spans more than 48 hours
    clusterOptions = { params.max_time > QOS_LONG_THRESHOLD ?
                       '--constraint=scratch2 --qos=long' :
                       '--constraint=scratch2' }
    queue = { params.max_memory * task.attempt > FAT_PLUS_PARTITION_THRESHOLD ?
              FAT_PLUS_PARTITION : FAT_PARTITION }
    errorStrategy  = { task.exitStatus in ERROR_CODES ? 'retry' : 'finish' }
    maxRetries     = params.max_retries
  }
}

profiles {

    local {
        docker.enabled = true
        process {
            withName: RAWQC {
                container = 'clemensma/symbiontdivider:latest'
            }
            withName: TRIMMING {
                container = 'clemensma/symbiontdivider:latest'
            }
            withName: TRIMMEDQC {
                container = 'clemensma/symbiontdivider:latest'
            }
            withName: DENOVOASSEMBLY {
                container = 'staphb/spades:3.15.3'
            }
            withName: ENDOSYMBIONTCONTIGFILTERING {
                container = 'clemensma/symbiontdivider:latest'
            }
            withName: EXTRACTMITOGENOME {
                container = 'clemensma/symbiontdivider:latest'
            }
            withName: REASSEMBLEMITOGENOME {
                container = 'cyverse/novoplasty:3.7'
            }
            withName: STRANDCONTROL {
                container = 'pegi3s/blast:2.10.0'
            }
            withName: ANNOTATEMITOGENOME {
                container = 'nanozoo/mitos:2.0.8--c87ec9c'
            }
            withName: MITOSFORMATTING {
                container = 'clemensma/symbiontdivider:latest'
            }
            withName: ENDOSYMBIONTGENOMEQUALITY {
                container = 'ezlabgva/busco:v5.2.2_cv1'
            }
            withName: READMAPPINGFORCOVERAGE {
                container = 'biocontainers/bowtie2:v2.4.1_cv1'
            }
            withName: COVERAGEESTIMATE {
                container = 'clemensma/symbiontdivider:latest'
            }
            withName: CHECKENDOSYMBIONT {
                container = 'nanozoo/checkm:1.0.13--248242f'
            }
        }

    }

    slurm {

        singularity.enabled = true
        singularity.cacheDir = 'cache'
        singularity.autoMounts = true

        executor {
            name = 'slurm'
            queueSize = 50
            submitRateLimit = '10 sec'
        }

        process {
            withName: RAWQC {
                container = 'docker://clemensma/symbiontdivider:latest'
            }
            withName: TRIMMING {
                container = 'docker://clemensma/symbiontdivider:latest'
            }
            withName: TRIMMEDQC {
                container = 'docker://clemensma/symbiontdivider:latest'
            }
            withName: DENOVOASSEMBLY {
                container = 'docker://staphb/spades:3.15.3'
            }
            withName: ENDOSYMBIONTCONTIGFILTERING {
                container = 'docker://clemensma/symbiontdivider:latest'
            }
            withName: EXTRACTMITOGENOME {
                container = 'docker://clemensma/symbiontdivider:latest'
            }
            withName: REASSEMBLEMITOGENOME {
                container = 'docker://cyverse/novoplasty:3.7'
            }
            withName: STRANDCONTROL {
                container = 'docker://pegi3s/blast:2.10.0'
            }
            withName: ANNOTATEMITOGENOME {
                container = 'docker://nanozoo/mitos:2.0.8--c87ec9c'
            }
            withName: MITOSFORMATTING {
                container = 'docker://clemensma/symbiontdivider:latest'
            }
            withName: ENDOSYMBIONTGENOMEQUALITY {
                container = 'docker://ezlabgva/busco:v5.2.2_cv1'
            }
            withName: READMAPPINGFORCOVERAGE {
                container = 'docker://biocontainers/bowtie2:v2.4.1_cv1'
            }
            withName: COVERAGEESTIMATE {
                container = 'docker://clemensma/symbiontdivider:latest'
            }
            withName: CHECKENDOSYMBIONT {
                container = 'docker://nanozoo/checkm:1.0.13--248242f'
            }
        }
    }

}
